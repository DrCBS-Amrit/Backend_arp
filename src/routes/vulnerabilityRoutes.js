const path = require('path');
const express = require('express');
const multer = require('multer');
const mysql = require('mysql2/promise');
const router = express.Router();
const db = require('../db');
const ejs = require('ejs');
const puppeteer = require('puppeteer');

// Database connection
const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '4862',
  database: 'vulnerabilites_config'
};

// Configure multer for handling file uploads (in memory)
// const storage = multer.memoryStorage();
// const upload = multer({ storage });
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'public/uploads/'); // Set the destination folder for uploads
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname); // Set the filename
  }
});

const upload = multer({ storage });

router.post('/submit', upload.array('files'), async (req, res) => {
  const {
    websiteName,
    organizationName,
    testURL,
    location,
    hashValue,
    designation,
    email,
    workOrder,
    preparedBy,
    reviewedBy,
    approvedBy,
    distributedTo,
    reportStartDate,
    reportEndDate,
    reportid
  } = req.body;

  const query = `
    INSERT INTO deatials_of_reprot (
      websiteName, 
      organizationName, 
      testUrl, 
      location, 
      hashValue, 
      designation, 
      email, 
      workorder, 
      preparedBy, 
      reviewedBy, 
      approvedBy, 
      distributedTo, 
      reportStartDate, 
      reportEndDate,
      reportid
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `;

  const values = [
    websiteName,
    organizationName,
    testURL,
    location,
    hashValue,
    designation,
    email,
    workOrder,
    preparedBy,
    reviewedBy,
    approvedBy,
    distributedTo,
    reportStartDate,
    reportEndDate,
    reportid
  ];

  try {
    const connection = await mysql.createConnection(dbConfig);
    await connection.execute(query, values);
    await connection.end();

    res.json({ message: 'Successfully submitted' });
  } catch (err) {
    console.error('Error inserting into database:', err);
    res.status(500).send('Database error');
  }
});

// POST route for form submission with location, vulnerabilities, and screenshots
router.post('/vulnerabilities', upload.any(), async (req, res) => {
  const { location, vulnerabilities, reportId} = req.body;
  if (!reportId) {
    return res.status(400).json({ message: 'Report ID is required' });
  }
  // Split location string by commas and parse vulnerabilities from JSON string
  const locationArray = location.split(',');
  const selectedVulnerabilities = JSON.parse(vulnerabilities);

  const insertVulnerabilitiesQuery = `
    INSERT INTO vulnerability_details (
      vulnerable_point_location, 
      vulnerability, 
      screenshot_files,
      report_id
    ) VALUES (?, ?, ?,?)
  `;

  try {
    const connection = await mysql.createConnection(dbConfig);

    // Iterate over the location array length
    for (let i = 0; i < locationArray.length; i++) {
      const loc = locationArray[i] || null;
      const vuln = selectedVulnerabilities[i] || null;
      const file = req.files[i] ? req.files[i].filename : null;

      // Check for undefined values and replace them with null
      const values = [
        loc,
        vuln,
        file,
        reportId

      ];

      console.log('Inserting values:', values); // Debugging: Log the values

      await connection.execute(insertVulnerabilitiesQuery, values);
    }

    await connection.end();
    res.json({ message: 'Details submitted successfully!' });
  } catch (err) {
    console.error('Error inserting into database:', err);
    res.status(500).json({ message: 'Database error' });
  }
});

router.get('/report', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    
    const website_name = await connection.execute( "select websiteName from deatials_of_reprot ");
    const organizationName = await connection.execute("select organizationName from deatials_of_reprot");
    const [datas] = await connection.execute('SELECT lvp.vulnerable_point_location, lvp.vulnerability, lvp.means_of_identification, lvp.CWE ,screenshot_files FROM ListOfVulnerablePoint lvp left join vulnerability_details vd on lvp.vulnerability = vd.vulnerability');
    const vuln_point_data = datas.map(data => ({
      vulnerable_point_location: data.vulnerable_point_location,
      vulnerability: data.vulnerability,
      means_of_identification: data.means_of_identification,
      comments_review: data.comments_review,
      screenshot_files: `http://localhost:3000/uploads/${data.screenshot_files}`
    }));
    console.log('-------------->>>>',vuln_point_data);
    const [poc] = await connection.execute('SELECT screenshot_files FROM vulnerability_details where id=23'); 
    const screenshotFiles = poc.map(vd => {
      const base64String = vd.screenshot_files
      return `http://localhost:3000/uploads/${base64String}`;
    });
    console.log('--->',screenshotFiles)
    

    await connection.end();

    const groupedVulnerabilities = vuln_point_data.reduce((acc, curr) => {
      const { vulnerability, vulnerable_point_location, means_of_identification, comments_review, screenshot_files,} = curr;
      let vulnerabilityGroup = acc.find(v => v.vulnerability === vulnerability);

      if (!vulnerabilityGroup) {
        vulnerabilityGroup = {
          vulnerability,
          data: []
        };
        acc.push(vulnerabilityGroup);
      }

      vulnerabilityGroup.data.push({
        vulnerability,
        vulnerable_point_location,
        means_of_identification,
        comments_review,
        screenshot_files
      });

      return acc;
    }, []);

    const templatePath = path.join(__dirname, '..', 'views', 'report.ejs');
    // const screenshotFiles=[];
    const html = await ejs.renderFile(templatePath, { website_name, groupedVulnerabilities, vuln_point_data,screenshotFiles, organizationName});
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });
    const pdf = await page.pdf({ format: 'A4' });
    await browser.close();
    
    res.contentType('application/pdf');
    res.send(pdf);
  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).send('Error generating PDF');
  }
});

module.exports = router;
