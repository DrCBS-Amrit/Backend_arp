const express = require('express');
const multer = require('multer');
const path = require('path');
const mysql = require('mysql2/promise');
const ejs = require('ejs');
const puppeteer = require('puppeteer');
const router = express.Router();

// Database connection
const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '4862',
  database: 'vulnerabilites_config'
};

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'public/uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  }
});

const upload = multer({ storage });

router.post('/submit', upload.array('files'), async (req, res) => {
  const {
    websiteName,
    organizationName,
    testURL,
    location,
    hashValue,
    designation,
    email,
    workOrder,
    errorLocation,
    preparedBy,
    reviewedBy,
    approvedBy,
    distributedTo,
    reportStartDate,
    reportEndDate
  } = req.body;
  
//  const files = req.files ? req.files.map(file => file.filename) : [];

  const query = `
    INSERT INTO deatials_of_reprot (
      websiteName, 
      organizationName, 
      testUrl, 
      location, 
      hashValue, 
      designation, 
      email, 
      workorder, 
      errorLocation, 
      preparedBy, 
      reviewedBy, 
      approvedBy, 
      distributedTo, 
      reportStartDate, 
      reportEndDate
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `;

  const values = [
    websiteName,
    organizationName,
    testURL,
    location,
    hashValue,
    designation,
    email,
    workOrder,
    errorLocation,
    preparedBy,
    reviewedBy,
    approvedBy,
    distributedTo,
    reportStartDate,
    reportEndDate,
  ];

  try {
    const connection = await mysql.createConnection(dbConfig);
    await connection.execute(query, values);
    await connection.end();

    res.json({ message: 'Successfully submitted' });
  } catch (err) {
    console.error('Error inserting into database:', err);
    res.status(500).send('Database error');
  }
});


// POST route for form submission with location, vulnerabilities, and screenshots
router.post('/vulnerabilities', upload.array('screenshots'), async (req, res) => {
  const { location, vulnerabilities } = req.body;

  // Parse vulnerabilities from JSON string
  const selectedVulnerabilities = JSON.parse(vulnerabilities);

  // Get uploaded file names
  const screenshotFiles = req.files ? req.files.map(file => file.filename) : [];

  const insertVulnerabilitiesQuery = `
    INSERT INTO ListOfVulnerablePoints (
      vulnerable_point_location, 
      vulnerability, 
      screenshot_files
    ) VALUES (?, ?, ?)
  `;

  try {
    const connection = await mysql.createConnection(dbConfig);

    // Insert each vulnerability with the location and associated screenshots
    for (const vulnerability of selectedVulnerabilities) {
      await connection.execute(insertVulnerabilitiesQuery, [
        location,
        vulnerability,
        JSON.stringify(screenshotFiles)
      ]);
    }

    await connection.end();
    res.json({ message: 'Form submitted successfully!' });
  } catch (err) {
    console.error('Error inserting into database:', err);
    res.status(500).json({ message: 'Database error' });
  }
});

router.get('/report', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    
    const website_name = "domestic help portal";
    const [datas] = await connection.execute('SELECT vulnerable_point_location, vulnerability, means_of_identification, comments_review FROM ListOfVulnerablePoints');
    
    const vuln_point_data = datas.map(data => ({
      vulnerable_point_location: data.vulnerable_point_location,
      vulnerability: data.vulnerability,
      means_of_identification: data.means_of_identification,
      comments_review: data.comments_review
    }));

    await connection.end();

    const templatePath = path.join(__dirname, '..', 'views', 'report.ejs');
    
    const groupedVulnerabilities = vuln_point_data.reduce((acc, curr) => {
      const { vulnerability, vulnerable_point_location, means_of_identification, comments_review } = curr;
      let vulnerabilityGroup = acc.find(v => v.vulnerability === vulnerability);

      if (!vulnerabilityGroup) {
        vulnerabilityGroup = {
          vulnerability,
          data: []
        };
        acc.push(vulnerabilityGroup);
      }

      vulnerabilityGroup.data.push({
        vulnerability,
        vulnerable_point_location,
        means_of_identification,
        comments_review
      });

      return acc;
    }, []);

    const html = await ejs.renderFile(templatePath, { website_name, groupedVulnerabilities, vuln_point_data });
    
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });
    const pdf = await page.pdf({ format: 'A4' });

    await browser.close();

    res.contentType('application/pdf');
    res.send(pdf);
  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).send('Error generating PDF');
  }
});

module.exports = router;
