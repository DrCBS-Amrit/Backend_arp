const path = require('path');
const express = require('express');
const multer = require('multer');
const mysql = require('mysql2/promise');
const router = express.Router();
const db = require('../db');
const ejs = require('ejs');
const puppeteer = require('puppeteer');

// Database connection
const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '4862',
  database: 'vulnerabilites_config'
};

// Configure multer for handling file uploads (in memory)
// const storage = multer.memoryStorage();
// const upload = multer({ storage });
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'public/uploads/'); // Set the destination folder for uploads
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname); // Set the filename
  }
});

const upload = multer({ storage });

router.post('/submit', upload.array('files'), async (req, res) => {
  const {
    websiteName,
    organizationName,
    testURL,
    location,
    hashValue,
    designation,
    email,
    workOrder,
    preparedBy,
    reviewedBy,
    approvedBy,
    distributedTo,
    reportStartDate,
    reportEndDate,
    reportid,
    documentid,
    wr,
    hr,
    UR
  } = req.body;

  const query = `
    INSERT INTO deatials_of_reprot (
      websiteName, 
      organizationName, 
      testUrl, 
      location, 
      hashValue, 
      designation, 
      email, 
      workorder, 
      preparedBy, 
      reviewedBy, 
      approvedBy, 
      distributedTo, 
      reportStartDate, 
      reportEndDate,
      reportid,
      documentid,
      wr,
      hr,
      UR
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)
  `;

  const values = [
    websiteName,
    organizationName,
    testURL,
    location,
    hashValue,
    designation,
    email,
    workOrder,
    preparedBy,
    reviewedBy,
    approvedBy,
    distributedTo,
    reportStartDate,
    reportEndDate,
    reportid,
    documentid,
    wr,
    hr,
    UR
  ];

  try {
    const connection = await mysql.createConnection(dbConfig);
    await connection.execute(query, values);
    await connection.end();

    res.json({ message: 'Successfully submitted' });
  } catch (err) {
    console.error('Error inserting into database:', err);
    res.status(500).send('Database error');
  }
});

// POST route for form submission with location, vulnerabilities, and screenshots
router.post('/vulnerabilities', upload.any(), async (req, res) => {
  const { location, vulnerabilities, reportId} = req.body;
  if (!reportId) {
    return res.status(400).json({ message: 'Report ID is required' });
  }
  // Split location string by commas and parse vulnerabilities from JSON string
  const locationArray = location.split(',');
  const selectedVulnerabilities = JSON.parse(vulnerabilities);

  const insertVulnerabilitiesQuery = `
    INSERT INTO vulnerability_details (
      vulnerable_point_location, 
      vulnerability, 
      screenshot_files,
      report_id
    ) VALUES (?, ?, ?,?)
  `;

  try {
    const connection = await mysql.createConnection(dbConfig);

    // Iterate over the location array length
    for (let i = 0; i < locationArray.length; i++) {
      const loc = locationArray[i] || null;
      const vuln = selectedVulnerabilities[i] || null;
      const file = req.files[i] ? req.files[i].filename : null;

      // Check for undefined values and replace them with null
      const values = [
        loc,
        vuln,
        file,
        reportId

      ];

      console.log('Inserting values:', values); // Debugging: Log the values

      await connection.execute(insertVulnerabilitiesQuery, values);
    }

    await connection.end();
    res.json({ message: 'Details submitted successfully!' });
  } catch (err) {
    console.error('Error inserting into database:', err);
    res.status(500).json({ message: 'Database error' });
  }
});

router.get('/report', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    
    const [rows] = await connection.execute(
      "SELECT websiteName FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)"
  );
    const website_name = rows.length ? rows[0].websiteName : 'No Website Found';
  
    const [ogn] = await connection.execute("SELECT organizationName FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
    const organizationName = ogn.length ? ogn[0].organizationName : 'No og Found';
    const options = { day: '2-digit', month: 'short', year: 'numeric' };
    const [Sd]=await connection.execute("SELECT reportStartDate FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
    console.log("sdddddddddddddddd",Sd);
    console.log("full bhai");
    const startdate =Sd[0]?.reportStartDate ? new Date(Sd[0].reportStartDate).toLocaleDateString('en-GB', options) : 'No date';
    const [Ed]= await connection.execute("SELECT reportEndDate FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
    const Enddate = Ed[0]?.reportEndDate ? new Date(Ed[0].reportEndDate).toLocaleDateString('en-GB', options) : 'No End-date';
    const [urld]= await connection.execute("SELECT UR FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
    const ur = urld[0]?.UR ? new Date(urld[0].UR).toLocaleDateString('en-GB', options) : 'No End-date';
    const [hrd]= await connection.execute("SELECT hr FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
    const hashre = urld[0]?.hr ? new Date(hrd[0].hr).toLocaleDateString('en-GB', options) : 'No End-date';
    const [wrd]= await connection.execute("SELECT wr FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
    const wre = wrd[0]?.wr ? new Date(wrd[0].wr).toLocaleDateString('en-GB', options) : 'No End-date';

    console.log("0000000000000000000000000000000000",Enddate)
    const [doc_id]= await connection.execute("SELECT documentid FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)" );
    // const docId=doc_id[0].length ? doc_id[0].documentid : "No document id";
    const docId = doc_id[0]?.documentid || "No document id";
    // Prepared By
const [Pby] = await connection.execute("SELECT preparedBy FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const prepBy = Pby[0]?.preparedBy || "No document id";

// Reviewed By
const [vby] = await connection.execute("SELECT reviewedBy FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const VerifBy = vby[0]?.reviewedBy || "No document id";

// Approved By
const [aby] = await connection.execute("SELECT approvedBy FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const Apprby = aby[0]?.approvedBy || "No document id";

// Released By (Distributed To)
const [rby] = await connection.execute("SELECT distributedTo FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const releby = rby[0]?.distributedTo || "No document id";

const [Email]= await connection.execute("SELECT email FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const email = Email[0]?.email || "No document id";
const [deg]= await connection.execute("SELECT designation FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const designation=deg[0]?.designation || "No document id"; 
const [weburl]= await connection.execute("SELECT testURL FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const url=weburl[0]?.testURL || "No document id"; 

const [worder]= await connection.execute("SELECT workOrder FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const workOrder=worder[0]?.workOrder || "No document id"; 
const [loc]= await connection.execute("SELECT location FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const location=loc[0]?.location || "No document id"; 
const [has]= await connection.execute("SELECT hashValue FROM deatials_of_reprot WHERE reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const hash=has[0]?.hashValue || "No document id"; 

const [audit_staffs]= await connection.execute("select emp.EmailId,emp.Designation,emp.ProfessionalQualifications,emp.CertIn from employeedetails emp left join deatials_of_reprot repD on emp.NameEmployeeCode = repD.preparedBy where reportid = (SELECT MAX(reportid) FROM deatials_of_reprot)");
const audit_stats = audit_staffs.length > 0 ? audit_staffs[0].EmailId : "No Email id";

const desig = audit_staffs.length > 1 ? audit_staffs[1].Designation : "No Desig";


//  const [datas]=await connection.execute("SELECT lvp.vulnerable_point_location, lvp.vulnerability, lvp.means_of_identification, lvp.comments_review ,screenshot_files FROM listofvulnerablepoints lvp left join vulnerability_details vd on lvp.vulnerability = vd.vulnerability)");

    // const [datas] = await connection.execute(' SELECT repD.preparedBy,repD.reviewedBy, epm.Designation, emp.EmailId ,emp.ProfessionalQualifications,emp.CertIn FROM employeedetails emp left join deatials_of_reprot repD on emp.preparedBy=repD.preparedBy');
    const [datas] = await connection.execute('SELECT vd.vulnerable_point_location, vd.vulnerability, lvp.CWE ,vd.screenshot_files,lvp.SEVERITY, lvp.description, lvp.solution_and_work_around, lvp.reference FROM vulnerability_details vd  left join basic_details lvp on lvp.vulnerability = vd.vulnerability  WHERE report_id = (SELECT MAX(report_id) FROM vulnerability_details)');

    const vuln_point_data = datas.map(data => ({
      vulnerable_point_location: data.vulnerable_point_location,  
      vulnerability: data.vulnerability,
      cwe: data.CWE,
      severity:data.SEVERITY,
      description:data.description,
      solution_and_work_around: data.solution_and_work_around,
      reference: data.reference,
      screenshot_files: `http://localhost:3000/uploads/${data.screenshot_files}`
    }));
    console.log('-------------->>>>',vuln_point_data);
    // const [poc] = await connection.execute('SELECT screenshot_files FROM vulnerability_details where report_id=(SELECT MAX(report_id) FROM vulnerability_details)'); 
    // const screenshotFiles = poc.map(vd => {
    //   const base64String = vd.screenshot_files
    //   return `http://localhost:3000/uploads/${base64String}`;
    // });
    // console.log('--->',screenshotFiles)
    

    await connection.end();

    const groupedVulnerabilities = vuln_point_data.reduce((acc, curr) => {
      const { vulnerability, vulnerable_point_location, cwe,severity,description,solution_and_work_around,reference, screenshot_files,} = curr;
      let vulnerabilityGroup = acc.find(v => v.vulnerability === vulnerability);

      if (!vulnerabilityGroup) {
        vulnerabilityGroup = {
          vulnerability,
          data: []
        };
        acc.push(vulnerabilityGroup);
      }

      vulnerabilityGroup.data.push({
        vulnerability,
        vulnerable_point_location,
        cwe,
        severity,
        description,
        solution_and_work_around,
        reference,
        screenshot_files
      });
      console.log('vulnerabilityGroup--------->>',vulnerabilityGroup);

      return acc;
    }, []);

    console.log("groupedVulnerabilities------>>>>",groupedVulnerabilities)
    const templatePath = path.join(__dirname, '..', 'views', 'report.ejs');
    // const screenshotFiles=[];
    const html = await ejs.renderFile(templatePath, { website_name, groupedVulnerabilities, vuln_point_data, organizationName,Enddate,startdate,docId,prepBy,VerifBy,Apprby,releby,email,designation,url,workOrder,hash,location,ur,wre,hashre,audit_stats,desig});
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });
    const pdf = await page.pdf({ format: 'A4' });
    await browser.close();
    
    res.contentType('application/pdf');
    res.send(pdf);
  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).send('Error generating PDF');
  }
});

module.exports = router;
