const express = require('express');
const multer = require('multer');
const path = require('path');
const db = require('../db');
const mysql = require('mysql2/promise');
const ejs = require('ejs');
const puppeteer = require('puppeteer');
const router = express.Router();

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'public/uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  }
});

const upload = multer({ storage });

router.post('/submit', upload.array('files'), (req, res) => {
  const { text, url } = req.body;
  const files = req.files.map(file => file.filename);

  const query = 'INSERT INTO vulnerabilities (description, url, screenshots) VALUES (?, ?, ?)';
  db.query(query, [text[0], url[0], JSON.stringify(files)], (err, result) => {
    if (err) {
      console.error('Error inserting into database:', err);
      res.status(500).send('Database error');
      return;
    }
    res.json({ message: 'Successfully submitted', id: result.insertId });
  });
});

// Database connection
const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '4862',
  database: 'vulnerabilites_config'
};

router.get('/report', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    
    const website_name = "domestic help portal";
    // const [rows] = await connection.execute('SELECT name FROM vulnerabilities_name');
    //const vulnerability_names = rows.map(row => row.name);
    const [datas]=await connection.execute('SELECT vulnerable_point_location,vulnerability,means_of_identification,comments_review from ListOfVulnerablePoints')
    const vuln_point_data = datas.map(data => ({
      vulnerable_point_location: data.vulnerable_point_location,
      vulnerability: data.vulnerability,
      means_of_identification: data.means_of_identification,
      comments_review: data.comments_review
  }));

    console.log(vuln_point_data);
    await connection.end();
    
    const templatePath = path.join(__dirname, '..', 'views', 'report.ejs');
    //const html = await ejs.renderFile(templatePath, { website_name, vulnerability_names,vuln_point_data});
    // Grouping by vulnerability
const groupedVulnerabilities = vuln_point_data.reduce((acc, curr) => {
  const { vulnerability, vulnerable_point_location, means_of_identification, comments_review } = curr;

  // Find if the vulnerability type already exists in the accumulator
  let vulnerabilityGroup = acc.find((v) => v.vulnerability === vulnerability);

  if (!vulnerabilityGroup) {
    // If not, create a new group for this vulnerability type
    vulnerabilityGroup = {
      vulnerability,
      data: [],
    };
    acc.push(vulnerabilityGroup);
  }

  // Add the current vulnerability data to the appropriate group
  vulnerabilityGroup.data.push({
    vulnerability,
    vulnerable_point_location,
    means_of_identification,
    comments_review,
  });

  return acc;
}, []);
console.log("------>",groupedVulnerabilities)


const html = await ejs.renderFile(templatePath, { website_name,groupedVulnerabilities,vuln_point_data});
   // console.log(vulnerability_names);
    
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });
    const pdf = await page.pdf({ format: 'A4' });

    await browser.close();

    res.contentType('application/pdf');
    res.send(pdf);
  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).send('Error generating PDF');
  }
});


module.exports = router;
